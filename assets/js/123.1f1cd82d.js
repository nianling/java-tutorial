(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{738:function(t,a,e){"use strict";e.r(a);var v=e(21),n=Object(v.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"高级并发对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高级并发对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 高级并发对象")]),t._v(" "),e("p",[t._v("到目前为止，本课将重点放在从一开始就是 Java 平台一部分的低级 API。这些 API 对于非常基本的任务是足够的，\n但是对于更高级的任务，需要更高级的构建块。对于充分利用当今多处理器和多核系统的大规模并发应用程序尤其如此。")]),t._v(" "),e("p",[t._v("在本节中，我们将介绍 Java 平台版本 5.0 引入的一些高级并发功能。这些功能中的大多数都是在新的 "),e("code",[t._v("java.util.concurrent")]),t._v(" 软件包中实现的。\nJava "),e("code",[t._v("Collections Framework")]),t._v(" 中还有新的并发数据结构。")]),t._v(" "),e("ul",[e("li",[t._v("锁对象 - 支持简化许多并发应用程序的锁定成语。")]),t._v(" "),e("li",[t._v("执行者 - 定义一个用于启动和管理线程的高级 API。提供的执行程序实现通过 java.util.concurrent 提供适用于大规模应用程序的线程池管理。")]),t._v(" "),e("li",[t._v("并发集合 - 可以更轻松地管理大量数据，并可大大减少同步的需要。")]),t._v(" "),e("li",[t._v("原子变量 - 具有最小化同步的功能，有助于避免内存一致性错误。")]),t._v(" "),e("li",[t._v("ThreadLocalRandom -（在 JDK 7 中）提供了来自多个线程的伪随机数的有效生成。")])])])},[],!1,null,null,null);a.default=n.exports}}]);